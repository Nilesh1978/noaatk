#
GeomTimeline <- ggplot2::ggproto("GeomTimeline", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(size >=thresh)
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
grid.text("hell", just = c("left", "bottom"))
ggplot(plot_dat, aes(x = DATE))+ geom_timeline(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(size >=thresh)
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
geom_timelinelabel <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimelinelabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
ggplot(plot_dat, aes(x = DATE))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
ggplot2
ggplot2 %>% library()
library(ggplot2)
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 45)
grid::gList(s,t,c, te)
}
)
library(dplyr)
ggplot(plot_dat, aes(x = DATE))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
grid::textGrob()
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
grid::grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
library(grid)
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=20))
grid.text("SOMETHING NICE AND BIG", gp=gpar(fontsize=5))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("left","bottom"), rot = 15)
grid::gList(s,t,c, te)
}
)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
plot_dat <- noaa %>% filter(DATE< ymd("2009-1-1") & DATE > ymd("2005-1-1")) %>% filter(COUNTRY %in% c("CHINA", "JAPAN", "USA"))
library(lubridate)
plot_dat <- noaa %>% filter(DATE< ymd("2009-1-1") & DATE > ymd("2005-1-1")) %>% filter(COUNTRY %in% c("CHINA", "JAPAN", "USA"))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
#
GeomTimelinelabel <- ggplot2::ggproto("GeomTimelinelabel", Geom,
required_aes = c("x", "loc"),
default_aes = aes(n_max = 3,y = 0.2, fill = "gray", size = 1, alpha = 0.5),
draw_key = function(data, params, size){
alpha <- (data$alpha - min(data$alpha, na.rm = T))/(max(data$alpha, na.rm =  T) - min(data$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
grid::circleGrob(0.5,0.5,r = data$size/20,
gp = grid::gpar(
fill = "gray"
))
},
draw_panel = function(data, panel_scales, coord) {
#data <- data %>% dplyr::filter((x >= xmin) & (x <= xmax))
coords <- coord$transform(data, panel_scales)
xmin <- min(coords$x)-0.1
xmax <- max(coords$x)+0.1
#standardize the alpha
alpha <- (coords$alpha - min(coords$alpha, na.rm = T))/(max(coords$alpha, na.rm =  T) - min(coords$alpha, na.rm = T))
alpha[is.na(alpha)] <- 0.5
#construct a circle grob
c <- grid::circleGrob(
x = coords$x,
y = coords$y,
r = coords$size/200,
gp = grid::gpar(alpha = alpha, fontsize = 4,
fill = coords$fill)
)
s <- grid::segmentsGrob(x0 = xmin, y0 = coords$y,
x1 = xmax, y1 = coords$y,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
thresh <- sort(coords$size, decreasing = T)[coords$n_max[1]]
#cat(thresh)
# cat(str(data))
coords <- coords %>% filter(!!quo(size >=thresh))
#cat(str(coords))
t <- grid::segmentsGrob(x0 = coords$x, y0 = coords$y,
x1 = coords$x, y = coords$y+0.1,
gp = grid::gpar(lwd = 2, col = "#c8cacf"))
te <- grid::textGrob(coords$loc, x = coords$x, y = coords$y+0.11,
just = c("bottom"), rot = 15)
grid::gList(s,t,c, te)
}
)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
0.001*0.99/(0.001*0.99+0.999*0.01)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
library(dplyr)
library(lubridate)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
library(ggplot2)
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))
ggplot(plot_dat, aes(x = DATE,y = COUNTRY))+ geom_timelinelabel(aes(fill = DEATHS, size = EQ_MAG_MS, loc = LOCATION_NAME_))+theme_bw()
install.packages("ggmap")
install.packages("leaflet")
map_dat <- plot_dat %>% filter(COUNTRY == "CHINA")
map_dat
library(leaflet)
install.packages("xtable")
library(leaflet)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS)
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE,
)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~0.3*EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ DATE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ paste("<b>date:</b> ",DATE))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ paste("<b>date:</b><br> ",DATE))
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>"
"<b>Magnitude: </b>", mag,"<br>"
"<b>Total deaths: </b>", dea)
}
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>"
"<b>Magnitude: </b>", mag,"<br>"
"<b>Total deaths: </b>", dea)
}
eq_create_label <- function(dat){
loc <- dat$LOCATION_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>",
"<b>Magnitude: </b>", mag,"<br>",
"<b>Total deaths: </b>", dea)
}
map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
View(map_dat)
eq_create_label <- function(dat){
loc <- dat$LOCATION_NAME_
mag <- dat$EQ_MAG_MS
dea <- dat$DEATHS
paste("<b>Location: </b>", loc,"<br>",
"<b>Magnitude: </b>", mag,"<br>",
"<b>Total deaths: </b>", dea)
}
map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
labeled_map_dat <- map_dat %>% mutate(pop_text = eq_create_label(.)) %>% select(pop_text)
labeled_map_dat <- map_dat %>% mutate(pop_text = eq_create_label(.))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text,DATE))
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text,DATE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ pop_text)
eq_map <- function(map_dat, annot_col){
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(pop_text))
#date popup plot
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = !!annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
#date popup plot
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~ annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(!!annot_col))
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = ~annot_col)
}
labeled_map_dat %>% eq_map(popup_text)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = labeled_map_dat, radius = ~EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = quo(pop_text))
quo(pop_text)
labeled_map_dat %>% eq_map(pop_text)
eq_map <- function(map_dat, annot_col){
annot_col <- enquo(annot_col)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data = map_dat, radius = ~ EQ_MAG_MS,
lng = ~ LONGITUDE, lat = ~ LATITUDE,
popup = annot_col)
}
labeled_map_dat %>% eq_map(pop_text)
labeled_map_dat %>% eq_map(DATE)
devtools::use_testthat()
class(GeomTimeline)
class(GeomTimeline())
geom_timeline()
library(ggplot2)
geom_timeline()
class(geom_timeline() )
eq_create_label(map_dat)
class(eq_create_label(map_dat))
labeled_map_dat %>% eq_map(DATE)
library(leaflet)
library(dplyr)
labeled_map_dat %>% eq_map(DATE)
labeled_map_dat %>% eq_map(DATE) %>% class()
devtools::use_data(mat_dat, internal = T)
devtools::use_data(map_dat, internal = T)
devtools::use_data(labeled_map_dat, internal = T)
View(map_dat)
map_dat %>% eq_map(DATE)
devtools::use_data(map_dat, internal = T)
devtools::build_vignettes()
